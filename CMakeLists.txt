# PortMixer from audacity: https://github.com/audacity/audacity/tree/master/lib-src/portmixer
cmake_minimum_required(VERSION 3.4)
set(TARGET portmixer)
project(${TARGET} C)
# Audacity version
set(VERSION 2.3.2)
set(TARGET_SOURCE ".")

set(PA_DIR "${TARGET_SOURCE}/deps/portaudio" CACHE STRING "PortAudio with portmixer patch dir.")
option(BUILD_TEST "Test build." OFF)

if(NOT EXISTS "${PA_DIR}/CMakeLists.txt")
    message(FATAL_ERROR "PortAudio not found in ${PA_DIR}")
endif()
set(PA_USE_WDMKS OFF)
set(PA_BUILD_STATIC ON)
set(PA_BUILD_SHARED OFF)
set(PA_DLL_LINK_WITH_STATIC_RUNTIME OFF)
set(PA_LIBNAME_ADD_SUFFIX OFF)
add_subdirectory(${PA_DIR} portaudio)

file(STRINGS ${PA_DIR}/include/portaudio.h PA_SYMBOL LIMIT_COUNT 1 REGEX "Pa_GetStreamHostApiType")
if(NOT PA_SYMBOL)
    message(FATAL_ERROR "Your version of portaudio does not include required Pa_GetStreamHostApiType function in ${PA_DIR}/src/common/pa_front.c")
endif()

set(HEADER_PUBLIC ${TARGET_SOURCE}/include/portmixer.h)
set(SOURCE_FILES ${TARGET_SOURCE}/src/px_mixer.c)
if(WIN32)
    list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_win_common.c ${TARGET_SOURCE}/src/px_win_endpoint.c)
    if(PA_USE_DS)
        file(STRINGS ${PA_DIR}/include/pa_win_ds.h DS_SYMBOL LIMIT_COUNT 1 REGEX "PaWinDS_GetStreamInputGUID")
        if(DS_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_win_ds.c)
            set(PX_USE_WIN_DSOUND ON)
        else()
            message(WARNING "Missing PaWinDS_GetStreamInputGUID support in ${PA_DIR}/include/pa_win_ds.h")
        endif()
    endif()
    if(PA_USE_WMME)
        file(STRINGS ${PA_DIR}/include/pa_win_wmme.h WMME_SYMBOL LIMIT_COUNT 1 REGEX "PaWinMME_GetStreamInputHandle")
        if(WMME_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_win_wmme.c)
            set(PX_USE_WIN_MME ON)
        else()
            message(WARNING "Missing PaWinMME_GetStreamInputHandle support in ${PA_DIR}/include/pa_win_wmme.h")
        endif()
    endif()
    if(PA_USE_WASAPI)
        file(STRINGS ${PA_DIR}/include/pa_win_wasapi.h WASAPI_SYMBOL LIMIT_COUNT 1 REGEX "PaWasapi_GetInputDeviceID")
        if(WASAPI_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_win_wasapi.c)
            set(PX_USE_WIN_WASAPI ON)
        else()
            message(WARNING "Missing PaWasapi_GetInputDeviceID support in ${PA_DIR}/include/pa_win_wasapi.h")
        endif()
    endif()
elseif(APPLE)
    if(PA_USE_COREAUDIO)
        file(STRINGS ${PA_DIR}/include/pa_mac_core.h COREAUDIO_SYMBOL LIMIT_COUNT 1 REGEX "PaMacCore_GetStreamInputDevice")
        if(OSS_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_mac_coreaudio.c)
            set(PX_USE_MAC_COREAUDIO ON)
        else()
            message(WARNING "Missing PaMacCore_GetStreamInputDevice support in ${PA_DIR}/include/pa_mac_core.h")
        endif()
    endif()
elseif(UNIX)
    if(PA_USE_ALSA)
        file(STRINGS ${PA_DIR}/include/pa_linux_alsa.h ALSA_SYMBOL LIMIT_COUNT 1 REGEX "PaAlsa_GetStreamInputCard")
        if(ALSA_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_linux_alsa.c)
            set(PX_USE_LINUX_ALSA ON)
        else()
            message(WARNING "Missing PaAlsa_GetStreamInputCard support in ${PA_DIR}/include/pa_linux_alsa.h")
        endif()
    endif()
    if(PA_USE_OSS)
        file(STRINGS ${PA_DIR}/include/pa_unix_oss.h OSS_SYMBOL LIMIT_COUNT 1 REGEX "PaOSS_GetStreamInputDevice")
        if(OSS_SYMBOL)
            list(APPEND SOURCE_FILES ${TARGET_SOURCE}/src/px_unix_oss.c)
            set(PX_USE_UNIX_OSS ON)
        else()
            message(WARNING "Missing PaAlsa_GetStreamInputCard support in ${PA_DIR}/include/pa_linux_alsa.h")
        endif()
    endif()
endif()

if(NOT PX_USE_WIN_DSOUND AND NOT PX_USE_WIN_MME AND NOT PX_USE_WIN_WASAPI AND NOT PX_USE_LINUX_ALSA AND NOT PX_USE_UNIX_OSS AND NOT PX_USE_MAC_COREAUDIO)
    message(FATAL_ERROR "No supported mixer interfaces detected")
endif()

add_library(${TARGET} STATIC ${SOURCE_FILES})
target_compile_definitions(${TARGET} PRIVATE
        $<$<BOOL:${PX_USE_WIN_DSOUND}>:PX_USE_WIN_DSOUND>
        $<$<BOOL:${PX_USE_WIN_MME}>:PX_USE_WIN_MME>
        $<$<BOOL:${PX_USE_WIN_WASAPI}>:PX_USE_WIN_WASAPI>
        $<$<BOOL:${PX_USE_LINUX_ALSA}>:PX_USE_LINUX_ALSA>
        $<$<BOOL:${PX_USE_UNIX_OSS}>:PX_USE_UNIX_OSS>
        $<$<BOOL:${PX_USE_MAC_COREAUDIO}>:PX_USE_MAC_COREAUDIO>
        )
target_include_directories(${TARGET} PUBLIC "${TARGET_SOURCE}/include")
target_link_libraries(${TARGET} PUBLIC portaudio_static)
#target_sources(${TARGET} PUBLIC ${HEADER_PUBLIC})
#set_target_properties(${TARGET} PROPERTIES OSX_ARCHITECTURES "")
install(TARGETS ${TARGET}
  EXPORT portmixer-targets
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  PUBLIC_HEADER DESTINATION include
  )
install(FILES LICENSE.txt DESTINATION share/doc/portmixer)

if(BUILD_TEST)
    add_executable(px_test ${TARGET_SOURCE}/px_tests/px_test.c)
    target_link_libraries(px_test PRIVATE ${TARGET})
    target_include_directories(${TARGET} PRIVATE "${TARGET_SOURCE}/include")
    install(TARGETS px_test RUNTIME DESTINATION bin)
endif()
